#+TITLE: ap-org layer
# Document tags are separated with "|" char
# The example below contains 2 tags: "layer" and "web service"
# Avaliable tags are listed in <spacemacs_root>/.ci/spacedoc-cfg.edn
# under ":spacetools.spacedoc.config/valid-tags" section.
#+TAGS: layer|web service

# The maximum height of the logo should be 200 pixels.
[[img/ap-org.png]]

# TOC links should be GitHub style anchors.
* Description
This is my custom org-mode configuration.
* Install
To use this configuration layer, tangle all code blocks from this file and
add it to your =~/.spacemacs=. You will need to add =ap-org= to the existing
=dotspacemacs-configuration-layers= list in this file.
* Configuration
** File Header
Nothing to see here, just the file header that needs to make it to
the final file.
#+begin_src elisp :tangle packages.el
;;; packages.el --- ap-org layer packages file for Spacemacs.
;;
;; Copyright (c) 2012-2018 Sylvain Benner & Contributors
;;
;; Author: alepeh <alexander@pehm.biz>
;; URL: https://github.com/syl20bnr/spacemacs
;;
;; This file is not part of GNU Emacs.
;;
;;; License: GPLv3

;;; Commentary:

;; See the Spacemacs documentation and FAQs for instructions on how to implement
;; a new layer:
;;
;;   SPC h SPC layers RET
;;
;;
;; Briefly, each package to be installed or configured by this layer should be
;; added to `ap-org-packages'. Then, for each package PACKAGE:
;;
;; - If PACKAGE is not referenced by any other Spacemacs layer, define a
;;   function `ap-org/init-PACKAGE' to load and initialize the package.

;; - Otherwise, PACKAGE is already referenced by another Spacemacs layer, so
;;   define the functions `ap-org/pre-init-PACKAGE' and/or
;;   `ap-org/post-init-PACKAGE' to customize the package as it is loaded.

;;; Code:

#+end_src
** Referenced packages
The following function lists all packages that are either installed
by this layer or are installed by another layer but should be
configured here.
#+begin_src elisp :tangle packages.el
(defconst ap-org-packages
  '(
   org
))
#+end_src
** org mode configuration
This function configures org-mode after it has been loaded.
#+begin_src elisp :tangle packages.el
(defun ap-org/post-init-org ()
#+end_src
*** Constants
Here we define the common variables, like the default inbox file, that we use throughout the org-configuration.

#+begin_src elisp :tangle packages.el
(defvar org-default-inbox-file     "/mnt/workspace/inbox.org"         "New stuff collects in this file")
(defvar org-default-tasks-file     "/mnt/workspace/tasks.org"         "Tasks, TODOs and little projects")
(defvar org-default-incubate-file  "/mnt/workspace/incubating.org"   "Stuff that's not ready yet")
#+end_src
*** Agenda files
Todos and scheduled entries.
As they might be scattered all over the workspace, let's add all the files
in the workspace.
#+begin_src elisp :tangle packages.el
(setq org-agenda-files (list
                          "/mnt/workspace"
                          )
        org-agenda-default-appointment-duration 120
        org-icalendar-combined-agenda-file "/mnt/workspace/agenda.ics"
        org-attach-set-inherit t
        )
#+end_src
*** Capture templates
#+begin_src elisp :tangle packages.el
(defvar org-capture-templates (list))
(setq org-capture-default-template "i")
(add-to-list 'org-capture-templates
             `("i" "Inbox from nowhere"        entry
               (file ,org-default-inbox-file)
               "* %?\n:PROPERTIES:\n:CREATED:%U\n:END:"
               :empty-lines 0))
(add-to-list 'org-capture-templates
             `("r" "Inbox with back-ref"        entry
               (file ,org-default-inbox-file)
               "* %?\n:PROPERTIES:\n:CREATED:%U\n:END:\n\n%i\nFrom: %a"
               :empty-lines 0))
#+end_src
*** Refile targets
Possible targets for refiling from the inbox are the following files.
The first two variable changes are necessary to allow refiling to top-level destinations.
#+begin_src elisp :tangle packages.el
(setq org-refile-use-outline-path 'file
      org-outline-path-complete-in-steps nil)
(setq org-refile-targets '((org-default-incubate-file :level . 0)
                           (org-default-tasks-file :level . 0)))
#+end_src
*** Layout configuration
#+begin_src elisp :tangle packages.el
  ;; indent text corresponding with the headline
  (setq org-startup-indented t)
  ;; hides leading/trailing formatting characters like *bold*, /italic/, =code=
  (setq org-hide-emphasis-markers t)
  ;; use bullet points for all headline levels
  (setq org-bullets-bullet-list '("○" "○" "○" "○"))
  ;; font face and color, make sure you have the fonts installed.
  (let* ((variable-tuple (cond ((x-list-fonts "Source Sans Variable") '(:font "Source Sans Variable"))
                             (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Variable."))))
        (base-font-color     (face-foreground 'default nil 'default))
        (headline           `(:inherit default :weight bold :foreground ,base-font-color)))
  ;; deeper levels of headlines are smaller
  (custom-theme-set-faces 'user
                          `(org-level-8 ((t (,@headline ,@variable-tuple))))
                          `(org-level-7 ((t (,@headline ,@variable-tuple))))
                          `(org-level-6 ((t (,@headline ,@variable-tuple))))
                          `(org-level-5 ((t (,@headline ,@variable-tuple))))
                          `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
                          `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.2))))
                          `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.3))))
                          `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.4))))
                          `(org-document-title ((t (,@headline ,@variable-tuple :height 1.3 :underline nil))))))
#+end_src
*** Babel configuration
#+begin_src elisp :tangle packages.el 
    ;; Do not ask for confirmation when executing code blocks
  (setq org-confirm-babel-evaluate nil)

    ;; supported languages for code blocks
  (org-babel-do-load-languages
    'org-babel-load-languages
      '((shell . t)
        (js . t)
        (plantuml . t)
        (dot . t)
        (java . t)))
#+end_src
***  Calendar configuration
This is not really specific to org-mode but to emacs in general, so it could be moved out of here.
#+begin_src elisp :tangle packages.el
 ;; Set the first day of the week to Monday
(setq calendar-week-start-day 1)

;; Customize the emacs calendar to show week numbers
(setq calendar-intermonth-text
      '(propertize
        (format "%2d"
                (car
                 (calendar-iso-from-absolute
                  (calendar-absolute-from-gregorian (list month day year)))))
        'font-lock-face 'font-lock-warning-face))

(setq calendar-intermonth-header
      (propertize "Wk"                  ; or e.g. "KW" in Germany
                  'font-lock-face 'font-lock-keyword-face))
#+end_src
*** Misc
#+begin_src elisp :tangle packages.el
 (setq org-todo-keyword-faces
      '(("TODO" . (:foreground "white" :weight bold)) ("STARTED" . "yellow")
        ("DONE" . (:foreground "green" :weight bold))))

  (setq org-image-actual-width '(300))

  ;;(setq org-refile-targets '((nil :maxlevel . 9)
  ;;(org-agenda-files :maxlevel . 9)))

  (setq org-plantuml-jar-path
        (expand-file-name "~/plantuml.jar"))

  (add-hook 'org-babel-after-execute-hook
            (lambda ()
              (when org-inline-image-overlays
                (org-redisplay-inline-images))))
                
;; Auto sorting
(require 'cl)
(require 'dash)

(defun todo-to-int (todo)
    (first (-non-nil
            (mapcar (lambda (keywords)
                      (let ((todo-seq
                             (-map (lambda (x) (first (split-string  x "(")))
                                   (rest keywords)))) 
                        (cl-position-if (lambda (x) (string= x todo)) todo-seq)))
                    org-todo-keywords))))

(defun my/org-sort-key ()
  (let* ((todo-max (apply #'max (mapcar #'length org-todo-keywords)))
         (todo (org-entry-get (point) "TODO"))
         (todo-int (if todo (todo-to-int todo) todo-max))
         (priority (org-entry-get (point) "PRIORITY"))
         (priority-int (if priority (string-to-char priority) org-default-priority)))
    (format "%03d %03d" todo-int priority-int)
    ))

(defun my/org-sort-entries ()
  (interactive)
  (org-sort-entries nil ?f #'my/org-sort-key))


;; Export using Jekyll
(defun org-export-table-cell-starts-colgroup-p (table-cell info))
(defun org-export-table-cell-ends-colgroup-p (table-cell info))

(setq org-publish-project-alist
      '(
	("all-org-files-to-html"
         ;; Path to your org files.
         :base-directory "/mnt/workspace/"
         :base-extension "org"
         :publishing-function org-html-publish-to-html
         :publishing-directory "/mnt/workspace/exports/"
	)
        ("all-org-attachments"
         :base-directory "/mnt/workspace/data/"
         :base-extension "css\\|js\\|png\\|jpeg\\|jpg\\|gif\\|pdf\\|mp3\\|ogg"
         :publishing-directory "/mnt/workspace/exports/data/"
         :recursive t
         :publishing-function org-publish-attachment)
        ("all-org-and-attachments" :components ("all-org-files-to-html" "all-org-attachments"))
        ("rfk-jekyll-html"
         ;; Path to your org files.
         :base-directory "/mnt/workspace/rfk/web/"
         :base-extension "org"

         ;; Path to your Jekyll project.
         :publishing-directory "/mnt/workspace/rfk/jekyll/"
         :recursive t
         :publishing-function org-html-publish-to-html
         :headline-levels 4 
         :html-extension "html"
         :body-only t ;; Only export section between <body> </body>
         )
        ("rfk-jekyll-attachments"
         :base-directory "/mnt/workspace/rfk/web/"
         :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf\\|php"
         :publishing-directory "/mnt/workspace/rfk/jekyll/"
         :recursive t
         :publishing-function org-publish-attachment)
        ("rfk-jekyll-all" :components ("rfk-jekyll-html" "rfk-jekyll-attachments"))

        ("blog-jekyll-html"
         ;; Path to your org files.
         :base-directory "/mnt/workspace/alepeh/blog/source/"
         :base-extension "org"

         ;; Path to your Jekyll project.
         :publishing-directory "/mnt/workspace/alepeh/blog/jekyll/thinkspace/"
         :recursive t
         :publishing-function org-html-publish-to-html
         :headline-levels 4 
         :html-extension "html"
         :with-toc nil ;; Otherwise using headkines will break the layout
         :body-only t ;; Only export section between <body> </body>
         )
        ("blog-jekyll-attachments"
         :base-directory "/mnt/workspace/alepeh/blog/source/"
         :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf\\|php"
         :publishing-directory "/mnt/workspace/alepeh/blog/jekyll/thinkspace/"
         :recursive t
         :publishing-function org-publish-attachment)
        ("blog-jekyll-all" :components ("blog-jekyll-attachments" "blog-jekyll-html"))

        )
    )
  ;; In org 9.2 we need org-tempo to expand src and example blocks
  ;; they have been replaced with structure templates
  (require 'org-tempo)

  ;; org-journal configuration
  (setq org-journal-dir "/mnt/workspace/journal/")
#+end_src

#+begin_src elisp :tangle packages.el
  ) ;;ap-org/post-init-org ends here
#+end_src
* Key bindings

| Key Binding | Description    |
|-------------+----------------|
| ~SPC x x x~ | Does thing01   |

# Use GitHub URLs if you wish to link a Spacemacs documentation file or its heading.
# Examples:
# [[https://github.com/syl20bnr/spacemacs/blob/master/doc/VIMUSERS.org#sessions]]
# [[https://github.com/syl20bnr/spacemacs/blob/master/layers/%2Bfun/emoji/README.org][Link to Emoji layer README.org]]
# If space-doc-mode is enabled, Spacemacs will open a local copy of the linked file.
